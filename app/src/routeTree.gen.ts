/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root"
import { Route as LoginImport } from "./routes/login"
import { Route as LayoutRouteImport } from "./routes/_layout/route"
import { Route as LayoutIndexImport } from "./routes/_layout/index"
import { Route as LayoutRepositoriesRouteImport } from "./routes/_layout/repositories/route"
import { Route as LayoutPrsRouteImport } from "./routes/_layout/prs/route"
import { Route as LayoutMilltimeIndexImport } from "./routes/_layout/milltime/index"
import { Route as LayoutRepositoriesAddRouteImport } from "./routes/_layout/repositories/add/route"
import { Route as LayoutPrsPrIdRouteImport } from "./routes/_layout/prs/$prId/route"
import { Route as LayoutRepositoriesNotificationsRepoIdRouteImport } from "./routes/_layout/repositories/notifications/$repoId/route"

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => rootRoute,
} as any)

const LayoutRouteRoute = LayoutRouteImport.update({
  id: "/_layout",
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => LayoutRouteRoute,
} as any)

const LayoutRepositoriesRouteRoute = LayoutRepositoriesRouteImport.update({
  id: "/repositories",
  path: "/repositories",
  getParentRoute: () => LayoutRouteRoute,
} as any)

const LayoutPrsRouteRoute = LayoutPrsRouteImport.update({
  id: "/prs",
  path: "/prs",
  getParentRoute: () => LayoutRouteRoute,
} as any)

const LayoutMilltimeIndexRoute = LayoutMilltimeIndexImport.update({
  id: "/milltime/",
  path: "/milltime/",
  getParentRoute: () => LayoutRouteRoute,
} as any)

const LayoutRepositoriesAddRouteRoute = LayoutRepositoriesAddRouteImport.update(
  {
    id: "/add",
    path: "/add",
    getParentRoute: () => LayoutRepositoriesRouteRoute,
  } as any,
)

const LayoutPrsPrIdRouteRoute = LayoutPrsPrIdRouteImport.update({
  id: "/$prId",
  path: "/$prId",
  getParentRoute: () => LayoutPrsRouteRoute,
} as any)

const LayoutRepositoriesNotificationsRepoIdRouteRoute =
  LayoutRepositoriesNotificationsRepoIdRouteImport.update({
    id: "/notifications/$repoId",
    path: "/notifications/$repoId",
    getParentRoute: () => LayoutRepositoriesRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_layout": {
      id: "/_layout"
      path: ""
      fullPath: ""
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRoute
    }
    "/login": {
      id: "/login"
      path: "/login"
      fullPath: "/login"
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    "/_layout/prs": {
      id: "/_layout/prs"
      path: "/prs"
      fullPath: "/prs"
      preLoaderRoute: typeof LayoutPrsRouteImport
      parentRoute: typeof LayoutRouteImport
    }
    "/_layout/repositories": {
      id: "/_layout/repositories"
      path: "/repositories"
      fullPath: "/repositories"
      preLoaderRoute: typeof LayoutRepositoriesRouteImport
      parentRoute: typeof LayoutRouteImport
    }
    "/_layout/": {
      id: "/_layout/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutRouteImport
    }
    "/_layout/prs/$prId": {
      id: "/_layout/prs/$prId"
      path: "/$prId"
      fullPath: "/prs/$prId"
      preLoaderRoute: typeof LayoutPrsPrIdRouteImport
      parentRoute: typeof LayoutPrsRouteImport
    }
    "/_layout/repositories/add": {
      id: "/_layout/repositories/add"
      path: "/add"
      fullPath: "/repositories/add"
      preLoaderRoute: typeof LayoutRepositoriesAddRouteImport
      parentRoute: typeof LayoutRepositoriesRouteImport
    }
    "/_layout/milltime/": {
      id: "/_layout/milltime/"
      path: "/milltime"
      fullPath: "/milltime"
      preLoaderRoute: typeof LayoutMilltimeIndexImport
      parentRoute: typeof LayoutRouteImport
    }
    "/_layout/repositories/notifications/$repoId": {
      id: "/_layout/repositories/notifications/$repoId"
      path: "/notifications/$repoId"
      fullPath: "/repositories/notifications/$repoId"
      preLoaderRoute: typeof LayoutRepositoriesNotificationsRepoIdRouteImport
      parentRoute: typeof LayoutRepositoriesRouteImport
    }
  }
}

// Create and export the route tree

interface LayoutPrsRouteRouteChildren {
  LayoutPrsPrIdRouteRoute: typeof LayoutPrsPrIdRouteRoute
}

const LayoutPrsRouteRouteChildren: LayoutPrsRouteRouteChildren = {
  LayoutPrsPrIdRouteRoute: LayoutPrsPrIdRouteRoute,
}

const LayoutPrsRouteRouteWithChildren = LayoutPrsRouteRoute._addFileChildren(
  LayoutPrsRouteRouteChildren,
)

interface LayoutRepositoriesRouteRouteChildren {
  LayoutRepositoriesAddRouteRoute: typeof LayoutRepositoriesAddRouteRoute
  LayoutRepositoriesNotificationsRepoIdRouteRoute: typeof LayoutRepositoriesNotificationsRepoIdRouteRoute
}

const LayoutRepositoriesRouteRouteChildren: LayoutRepositoriesRouteRouteChildren =
  {
    LayoutRepositoriesAddRouteRoute: LayoutRepositoriesAddRouteRoute,
    LayoutRepositoriesNotificationsRepoIdRouteRoute:
      LayoutRepositoriesNotificationsRepoIdRouteRoute,
  }

const LayoutRepositoriesRouteRouteWithChildren =
  LayoutRepositoriesRouteRoute._addFileChildren(
    LayoutRepositoriesRouteRouteChildren,
  )

interface LayoutRouteRouteChildren {
  LayoutPrsRouteRoute: typeof LayoutPrsRouteRouteWithChildren
  LayoutRepositoriesRouteRoute: typeof LayoutRepositoriesRouteRouteWithChildren
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutMilltimeIndexRoute: typeof LayoutMilltimeIndexRoute
}

const LayoutRouteRouteChildren: LayoutRouteRouteChildren = {
  LayoutPrsRouteRoute: LayoutPrsRouteRouteWithChildren,
  LayoutRepositoriesRouteRoute: LayoutRepositoriesRouteRouteWithChildren,
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutMilltimeIndexRoute: LayoutMilltimeIndexRoute,
}

const LayoutRouteRouteWithChildren = LayoutRouteRoute._addFileChildren(
  LayoutRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  "": typeof LayoutRouteRouteWithChildren
  "/login": typeof LoginRoute
  "/prs": typeof LayoutPrsRouteRouteWithChildren
  "/repositories": typeof LayoutRepositoriesRouteRouteWithChildren
  "/": typeof LayoutIndexRoute
  "/prs/$prId": typeof LayoutPrsPrIdRouteRoute
  "/repositories/add": typeof LayoutRepositoriesAddRouteRoute
  "/milltime": typeof LayoutMilltimeIndexRoute
  "/repositories/notifications/$repoId": typeof LayoutRepositoriesNotificationsRepoIdRouteRoute
}

export interface FileRoutesByTo {
  "/login": typeof LoginRoute
  "/prs": typeof LayoutPrsRouteRouteWithChildren
  "/repositories": typeof LayoutRepositoriesRouteRouteWithChildren
  "/": typeof LayoutIndexRoute
  "/prs/$prId": typeof LayoutPrsPrIdRouteRoute
  "/repositories/add": typeof LayoutRepositoriesAddRouteRoute
  "/milltime": typeof LayoutMilltimeIndexRoute
  "/repositories/notifications/$repoId": typeof LayoutRepositoriesNotificationsRepoIdRouteRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  "/_layout": typeof LayoutRouteRouteWithChildren
  "/login": typeof LoginRoute
  "/_layout/prs": typeof LayoutPrsRouteRouteWithChildren
  "/_layout/repositories": typeof LayoutRepositoriesRouteRouteWithChildren
  "/_layout/": typeof LayoutIndexRoute
  "/_layout/prs/$prId": typeof LayoutPrsPrIdRouteRoute
  "/_layout/repositories/add": typeof LayoutRepositoriesAddRouteRoute
  "/_layout/milltime/": typeof LayoutMilltimeIndexRoute
  "/_layout/repositories/notifications/$repoId": typeof LayoutRepositoriesNotificationsRepoIdRouteRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ""
    | "/login"
    | "/prs"
    | "/repositories"
    | "/"
    | "/prs/$prId"
    | "/repositories/add"
    | "/milltime"
    | "/repositories/notifications/$repoId"
  fileRoutesByTo: FileRoutesByTo
  to:
    | "/login"
    | "/prs"
    | "/repositories"
    | "/"
    | "/prs/$prId"
    | "/repositories/add"
    | "/milltime"
    | "/repositories/notifications/$repoId"
  id:
    | "__root__"
    | "/_layout"
    | "/login"
    | "/_layout/prs"
    | "/_layout/repositories"
    | "/_layout/"
    | "/_layout/prs/$prId"
    | "/_layout/repositories/add"
    | "/_layout/milltime/"
    | "/_layout/repositories/notifications/$repoId"
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRouteRoute: typeof LayoutRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRouteRoute: LayoutRouteRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/login"
      ]
    },
    "/_layout": {
      "filePath": "_layout/route.tsx",
      "children": [
        "/_layout/prs",
        "/_layout/repositories",
        "/_layout/",
        "/_layout/milltime/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_layout/prs": {
      "filePath": "_layout/prs/route.tsx",
      "parent": "/_layout",
      "children": [
        "/_layout/prs/$prId"
      ]
    },
    "/_layout/repositories": {
      "filePath": "_layout/repositories/route.tsx",
      "parent": "/_layout",
      "children": [
        "/_layout/repositories/add",
        "/_layout/repositories/notifications/$repoId"
      ]
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/prs/$prId": {
      "filePath": "_layout/prs/$prId/route.tsx",
      "parent": "/_layout/prs"
    },
    "/_layout/repositories/add": {
      "filePath": "_layout/repositories/add/route.tsx",
      "parent": "/_layout/repositories"
    },
    "/_layout/milltime/": {
      "filePath": "_layout/milltime/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/repositories/notifications/$repoId": {
      "filePath": "_layout/repositories/notifications/$repoId/route.tsx",
      "parent": "/_layout/repositories"
    }
  }
}
ROUTE_MANIFEST_END */
